
from Buttons import *
from threading import Thread
from telebot import types
from datetime import datetime
from SomeMethods import *
from NotesDB import *
from PIL import Image
import schedule
import telebot
import time
import os
import subprocess
import random
# import queue


import config


bot=telebot.TeleBot(config.BOT_TOKEN)
db = DataBase_Table(config.DataUrl)
# data_queue = queue.Queue()
# file_queue.put(message)


# trial_period = 0
# people = 0
# user_id = ""
# all_users = ""

SUCCESS_EFFECT_IDS = ["5104841245755180586", "5107584321108051014", "5046509860389126442"] #üî• üëç üéâ
FAIL_EFFECT_IDS = ["5104858069142078462", "5046589136895476101"] #üëé üí©

Some_methods = Class_of_methods()

    ################################  –§–£–ù–ö–¶–ò–ò  #####################################


def start_db():
    global all_users
    all_users = db.GetUsersAll()
    print(all_users)


def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(2)





def Morning_tasks():
    UserId = 324430515
    db.ACTIONS_QUESTS_FOR_TODAY(UserId, "‚Äî‚Äî‚Äî‚Äî üîÜ MORNING ‚Äî‚Äî‚Äî‚Äî", action="add")
    db.ACTIONS_QUESTS_FOR_TODAY(UserId, "–í—Å—Ç–∞–ª –≤ 7", action="add")
    db.ACTIONS_QUESTS_FOR_TODAY(UserId, "–î—É—à", action="add")
    db.ACTIONS_QUESTS_FOR_TODAY(UserId, "–ú–µ–¥–∏—Ç–∞—Ü–∏—è 15 –º–∏–Ω", action="add")
    db.ACTIONS_QUESTS_FOR_TODAY(UserId, "–£ –ú–ï–ù–Ø –ü–û–õ–£–ß–ò–¢–°–Ø", action="add")
    db.ACTIONS_QUESTS_FOR_TODAY(UserId, "‚Äî‚Äî‚Äî‚Äî üåô NIGHT ‚Äî‚Äî‚Äî‚Äî", action="add")
    db.ACTIONS_QUESTS_FOR_TODAY(UserId, "–ù–µ –¥—Ä–æ—á–∏–ª", action="add"
    db.ACTIONS_QUESTS_FOR_TODAY(UserId, "–ó–∞–ø–∏—Å–∞—Ç—å –∫–≤–µ—Å—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞", action="add")

    Some_methods.MORNING_TASKS(action="send", UserId=324430515)

    exam_date = "2025-05-31"
    life_end_date = "2078-12-04"
    life_start_date = "2007-12-04"
    days = Some_methods.weeks_until_exam(exam_date)
    days_life = Some_methods.weeks_until_exam(life_end_date)
    days_start_life = Some_methods.weeks_until_exam(life_start_date)
    weeks = days//7
    weeks_life = days_life//7
    weeks_start_life = days_start_life//7

    bot.send_message(UserId, f"–î–æ —ç–∫–∑–∞–º–µ–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {weeks} –Ω–µ–¥–µ–ª—å\n\n–î–æ –∫–æ–Ω—Ü–∞ –∂–∏–∑–Ω–∏: {weeks_life} –Ω–µ–¥–µ–ª—å\n–£–∂–µ –ø—Ä–æ—à–ª–æ: {weeks_start_life} –Ω–µ–¥–µ–ª—å", parse_mode='HTML')

    tz = db.Get_Time_Zone(f"{UserId}")
    cur_time = Some_methods.get_time__with_timezone(tz)

    time_object = dt.datetime.strptime(cur_time, '%d:%H:%M')

    for _ in range(8):
        random_hours = random.randint(1, 16)
        new_time_1 = time_object + dt.timedelta(hours=random_hours)
        UnicKey_1 = Some_methods.generate_random_string(40)
        db.ACTIONS_FOR_QUEUE(action="add", queue={"UserId":f"{UserId}", "now_date":None, "time_before":new_time_1, "data_type":"i_will_be_success", "msg_text":None, "photo":None, "UnicKey":UnicKey_1})







def Remind_evenng():
    message = None
    try:
        queue_data = db.ACTIONS_FOR_QUEUE(action="get")
        if queue_data:
            message = queue_data
        else:
            print("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

    # data_queue.put({"UserId":message.from_user.id, "now_date":cur_time, "time_before":new_before_time_5, "data_type":"remember", "msg_text":text, "UnicKey":"ADaktnhx"})

    if message is not None:
        for queue in message:
            UserId = queue["UserId"]
            tz = db.Get_Time_Zone(UserId)
            now_date = Some_methods.get_time__with_timezone(tz)
            time_before = queue["time_before"]
            data_type = queue["data_type"]
            text = queue["msg_text"]
            UnicKey = queue["UnicKey"]
            photo = queue["photo"]

            if data_type == "remember":
                now_date_obj = dt.datetime.strptime(now_date, '%d:%H:%M')
                time_before_obj = dt.datetime.strptime(time_before, '%d:%H:%M')
                if now_date_obj > time_before_obj:
                    if photo:
                        bot.send_photo(UserId, photo, caption=f"–û–¥–Ω–æ –∏–∑ —Ç–≤–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:<blockquote>{text}</blockquote>", parse_mode='HTML', disable_notification=True)
                    else:
                        bot.send_message(UserId, f"–û–¥–Ω–æ –∏–∑ —Ç–≤–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n<blockquote>{text}</blockquote>", parse_mode='HTML', disable_notification=True)
                    db.ACTIONS_FOR_QUEUE(action="delete", UnicKey_input=UnicKey)


            elif data_type == "finish_evening_tasks":
                evening_time = f"{now_date.split(":")[0]}:21:00"
                if now_date > evening_time:
                    Some_methods.Remind_TODAY_TASKS(action="send", UserId=UserId)
                    db.ACTIONS_FOR_QUEUE(action="delete", UnicKey_input=UnicKey)


            elif data_type == "post_video":
                now_date_obj = dt.datetime.strptime(now_date, '%d:%H:%M')
                time_before_obj = dt.datetime.strptime(time_before, '%d:%H:%M')
                if now_date_obj > time_before_obj:
                    if now_date_obj > time_before_obj:
                        if now_date_obj > time_before_obj:
                            if now_date_obj > time_before_obj:
                                bot.send_message(UserId, f"–≠—Ç–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–±–∏—Ç—å 100–ö–öüí∏üí∏üí∏", parse_mode='HTML', reply_markup=markup_finish_post_video)
                                db.ACTIONS_FOR_QUEUE(action="delete", UnicKey_input=UnicKey)
                            else:
                                bot.send_message(UserId, f"–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤üí∏üí∏üí∏", parse_mode='HTML', reply_markup=markup_finish_post_video)
                                db.ACTIONS_FOR_QUEUE(action="delete", UnicKey_input=UnicKey)
                        else:
                            bot.send_message(UserId, f"–ù–µ–∫—Å—Ç –≤–∏–¥–æ—Å—ã –ª–µ—Ç—è—Çüí∏üí∏üí∏", parse_mode='HTML', reply_markup=markup_finish_post_video)
                            db.ACTIONS_FOR_QUEUE(action="delete", UnicKey_input=UnicKey)
                    else:
                        bot.send_message(UserId, f"–ñ–¥—É –ø–µ—Ä–≤—ã–µ –≤–∏–¥–æ—Å—ãüí∏üí∏üí∏", parse_mode='HTML', reply_markup=markup_finish_post_video)
                        db.ACTIONS_FOR_QUEUE(action="delete", UnicKey_input=UnicKey)
                else:
                    pass


            elif data_type == "i_will_be_success":
                now_date_obj = dt.datetime.strptime(now_date, '%d:%H:%M')
                if now_date_obj > time_before:
                    bot.send_message(UserId, f"<b>–Ø –°–ú–û–ì–£</b>", parse_mode='HTML', reply_markup=markup_finish_post_video)
                    db.ACTIONS_FOR_QUEUE(action="delete", UnicKey_input=UnicKey)




def func_start():
    global all_users
    for i in all_users:
        try:
            user_id = i[0]
            bot.send_message(user_id, f"<b>–ó–∞–º–µ—á–µ–Ω—ã —Å–±–æ–∏, —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º</b>", parse_mode='HTML')
            
        except Exception as e:
            print(e)



def time_qualifier(message):
    region = message.text
    timezone = Some_methods.find_timezone(region)
    
    if timezone == False:
        msg = bot.send_message(message.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–≥–∏–æ–Ω!\n\n–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è, –∏–ª–∏ —É–∫–∞–∂–∏ —Ä–µ–≥–∏–æ–Ω —Å —Ç–∞–∫–∏–º –∂–µ —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º")
        bot.register_next_step_handler(msg, time_qualifier)

    reg = timezone[0]
    tz_name = timezone[1]
    cur_time = timezone[2]

    msg = bot.send_message(message.from_user.id, f"–°–µ–π—á–∞—Å —É –≤–∞—Å: {cur_time}\n\n–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–¥–∞–Ω–∏—è—Ö –±—É–¥—É –±–ª–∏–∂–µ –∫ 21:00")
    db.Add_Time_Zone(str(message.from_user.id), tz_name)
    TODAY_TASKS(message)


def ask_for_quest(call):
    input_text_QUESTS_FOR_TODAY = bot.send_message(call.from_user.id, "–ó–∞–ø–∏—Å–∞–ª ‚úÖ", parse_mode='HTML', disable_notification=True)
    bot.register_next_step_handler(input_text_QUESTS_FOR_TODAY, Add_QUESTS_FOR_TODAY)


def Add_QUESTS_FOR_TODAY(call):
    stop_mean=db.ACTIONS_STOP(f"{call.from_user.id}", action="get")
    print(stop_mean)
    if not stop_mean:
        text = call.text
        db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", text, action="add")
        ask_for_quest(call)


def TODAY_TASKS(call):
    db.ACTIONS_STOP(f"{call.from_user.id}", action="False")
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text="–Ø –±—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–î–æ–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç</i>", parse_mode='HTML', reply_markup=markup_Inline_Back22)
    # bot.register_next_step_handler(input_text_QUESTS_FOR_TODAY, Add_QUESTS_FOR_TODAY)
    @bot.message_handler(content_types=["text"])
    def wait_text(message: types.Message):
        stop_mean=db.ACTIONS_STOP(f"{message.from_user.id}", action="get")
        if not stop_mean:
            text = message.text
            db.ACTIONS_QUESTS_FOR_TODAY(f"{message.from_user.id}", text, action="add")
            ask_for_quest(message)




def ask_for_quest_GOAL(call):
    input_text_QUESTS_FOR_TODAY = bot.send_message(call.from_user.id, "–ó–∞–ø–∏—Å–∞–ª ‚úÖ", parse_mode='HTML', disable_notification=True)
    bot.register_next_step_handler(input_text_QUESTS_FOR_TODAY, Add_QUESTS_FOR_TODAY)


def Add_GOAL(call):
    stop_mean=db.ACTIONS_STOP(f"{call.from_user.id}", action="get")
    print(stop_mean)
    if not stop_mean:
        text = call.text
        db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", text, action="add")
        ask_for_quest(call)


def GOALS(call):
    db.ACTIONS_STOP(f"{call.from_user.id}", action="False")
    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text="–Ø –±—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π\n\n<i>–ü—Ä–∏–º–µ—Ä:\n–î–æ–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç</i>", parse_mode='HTML', reply_markup=markup_Inline_Back22)
    @bot.message_handler(content_types=["text"])
    def wait_text(message: types.Message):
        stop_mean=db.ACTIONS_STOP(f"{message.from_user.id}", action="get")
        if not stop_mean:
            text = message.text
            db.ACTIONS_QUESTS_FOR_TODAY(f"{message.from_user.id}", text, action="add")
            ask_for_quest(message)



def main_menu(message):
    bot.send_message(message.from_user.id, f"üìî <b>–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",  reply_markup=markup_Inline_Back1, parse_mode='HTML')







        ###########################      –ü–†–ò–í–ï–¢–°–¢–í–ò–ï      ##############################

@bot.message_handler(commands=["start"])
def menu(message: types.Message):
    if message.chat.type == 'private':
        if not db.CheckRegistr(f"{message.from_user.id}"):

            start_command = message.text
            referal_id = str(start_command[7:])

            if str(referal_id) != "":
                if str(referal_id) != str(message.from_user.id):
                    db.AddUser(f"{message.from_user.id}", referal_id, message.from_user.username)
                    # time_zone = bot.send_message(message.from_user.id, f"–ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å, –∏–ª–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ. (–¥–ª—è —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±–ª–∞—Å—Ç—å —Å —Ç–∞–∫–∏–º –∂–µ —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º)")
                    # bot.register_next_step_handler(time_zone, time_qualifier)
                    main_menu(message)

                    try:
                        bot.send_message(referal_id, f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚ùáÔ∏è")
                    except:
                        pass
                    
                else:
                    main_menu(message)
            else:
                db.AddUser(f"{message.from_user.id}", None, message.from_user.username)
                # time_zone = bot.send_message(message.from_user.id, f"–ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å, –∏–ª–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ. (–¥–ª—è —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±–ª–∞—Å—Ç—å —Å —Ç–∞–∫–∏–º –∂–µ —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º)")
                # bot.register_next_step_handler(time_zone, time_qualifier)
                main_menu(message)
        else:
            main_menu(message)
    else:
        main_menu(message)





@bot.callback_query_handler(func=lambda call: call.data.startswith('COMPLETED_TASK_TODAY') or call.data.startswith('DELETE_TASK_TODAY') or call.data.startswith('SELF_DO_TASK_TODAY'))
def reg(call):
    try:
        if "COMPLETED_TASK_TODAY" in call.data:

            tz_name = db.Get_Time_Zone(f"{call.from_user.id}")
            tz = timezone(tz_name)
            current_time = dt.datetime.now(tz)
            formatted_date = current_time.strftime('%d %B').lstrip('0')

            index=call.data.split('|')[1]
            text_btn=db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", index=int(index), action="get_by_index")

            db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", index=int(index), action="remove_by_index")
            db.ACTIONS_HISTORY_FINISH_TASKS(f"{call.from_user.id}", text=text_btn, action="add", date=formatted_date)
            res = db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", text=None, action="get")
            markup_InlineToday = types.InlineKeyboardMarkup(row_width=1)
            num = 0

            if len(res) > 0:
                bot.answer_callback_query(call.id, text=f'–°–¥–µ–ª–∞–Ω–æ ‚úÖ', show_alert = False)
                for task_caption in res:
                    Inline_TodayTask = types.InlineKeyboardButton(text=f"‚≠ïÔ∏è {task_caption}", callback_data=f"COMPLETED_TASK_TODAY|{num}")
                    markup_InlineToday.add(Inline_TodayTask)
                    num += 1
            
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup_InlineToday)
            else:
                bot.answer_callback_query(call.id, text=f'–¢—ã —Å—Ç–∞–ª –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏...', show_alert = True)
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)



        if "SELF_DO_TASK_TODAY" in call.data:

            tz_name = db.Get_Time_Zone(f"{call.from_user.id}")
            tz = timezone(tz_name)
            current_time = dt.datetime.now(tz)
            formatted_date = current_time.strftime('%d %B').lstrip('0')

            index=call.data.split('|')[1]
            text_btn=db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", index=int(index), action="get_by_index")


            db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", index=int(index), action="remove_by_index")
            db.ACTIONS_HISTORY_FINISH_TASKS(f"{call.from_user.id}", text=text_btn, action="add", date=formatted_date)
            res = db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", text=None, action="get")
            markup_InlineToday = types.InlineKeyboardMarkup(row_width=1)
            num = 0

            if len(res) > 0:
                bot.answer_callback_query(call.id, text=f'–°–¥–µ–ª–∞–Ω–æ ‚úÖ', show_alert = False)
                for task_caption in res:
                    Inline_TodayTask = types.InlineKeyboardButton(text=f"‚≠ïÔ∏è {task_caption}", callback_data=f"SELF_DO_TASK_TODAY|{num}")
                    markup_InlineToday.add(Inline_TodayTask)
                    num += 1
                Inline_Btn = types.InlineKeyboardButton(text="Back‚Ü©Ô∏è", callback_data="MENU_QUESTS_FOR_TODAY")
                markup_InlineToday.add(Inline_Btn)
            
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup_InlineToday)
            else:
                bot.answer_callback_query(call.id, text=f'–¢—ã —Å—Ç–∞–ª –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏...', show_alert = True)
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            


        if "DELETE_TASK_TODAY" in call.data:
            index=call.data.split('|')[1]
            db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", index=int(index), action="remove_by_index")
            res = db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", text=None, action="get")
            markup_InlineToday = types.InlineKeyboardMarkup(row_width=1)
            num = 0

            if len(res) > 0:
                bot.answer_callback_query(call.id, text=f'–£–¥–∞–ª–∏–ª üëå', show_alert = False)
                for task_caption in res:
                    Inline_TodayTask = types.InlineKeyboardButton(text=f"üß∑ {task_caption}", callback_data=f"DELETE_TASK_TODAY|{num}")
                    markup_InlineToday.add(Inline_TodayTask)
                    num += 1
                Inline_TodayTask = types.InlineKeyboardButton(text=f"Back‚Ü©Ô∏è", callback_data=f"MENU_QUESTS_FOR_TODAY")
                markup_InlineToday.add(Inline_TodayTask)
            
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup_InlineToday)
            else:
                bot.answer_callback_query(call.id, text=f'–ó–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚òπÔ∏è\n\n–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ', show_alert = True)
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


    except Exception as e:
        print(repr(e))


@bot.callback_query_handler(lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            # if call.data=="BACK":
            #     bot.delete_message(call.message.chat.id, call.message.message_id)
            #     Back(call)


            if call.data=="STOP":
                db.ACTIONS_STOP(f"{call.from_user.id}", action="True")
                res = db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", text=None, action="get")
                if res:
                    message_text = "\n\n‚ùáÔ∏è ".join(res)
                else:
                    message_text = "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á–∏"
                bot.send_message(call.from_user.id, f"¬ÆÔ∏è<i>–≠—Ç–∏ –∫–≤–µ—Å—Ç—ã —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—é—Ç, –Ω–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å –¥–µ—Ä—å–º–æ–º –Ω–µ –¥–µ–ª–∞–π –∏—Ö. –í—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ —Ç–≤–æ–π</i>\n\n<blockquote>üì¨<b>Your quests for today:\n\n‚ùáÔ∏è {message_text}</b></blockquote>", parse_mode='HTML', reply_markup=markup_Inline_BACK)
                bot.delete_message(call.message.chat.id, call.message.message_id)

                queue_list = db.ACTIONS_FOR_QUEUE(action="get")
                bool_mean = False
                for n_list in queue_list:
                    if str(call.from_user.id) == n_list["UserId"] and "finish_evening_tasks" == n_list["data_type"]:
                        bool_mean = True
                
                if not bool_mean:
                    UnicKey = Some_methods.generate_random_string(40)
                    db.ACTIONS_FOR_QUEUE(action="add", queue={"UserId":f"{call.from_user.id}", "now_date":None, "time_before":None, "data_type":"finish_evening_tasks", "msg_text":None, "photo":None, "UnicKey":UnicKey})


            elif call.data=="START_MENU":
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.from_user.id, f"üìî <b>–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",  reply_markup=markup_Inline_Back1, parse_mode='HTML')


            elif call.data=="MENU_QUESTS_FOR_TODAY":
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f"üë®‚Äçüíª –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup_Inline_QUESTS_FOR_TODAY)


            elif call.data=="COMPLETE_QUESTS_FOR_TODAY":
                Some_methods.Remind_TODAY_TASKS(action="self_completed", UserId=call.from_user.id)


            elif call.data=="CHECK_QUESTS_FOR_TODAY":
                res = db.ACTIONS_QUESTS_FOR_TODAY(f"{call.from_user.id}", text=None, action="get")
                if res:
                    message_text = "\n\n‚ùáÔ∏è ".join(res)
                else:
                    message_text = "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á–∏"
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f"¬ÆÔ∏è<i>–≠—Ç–∏ –∫–≤–µ—Å—Ç—ã —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—é—Ç, –Ω–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å –¥–µ—Ä—å–º–æ–º –Ω–µ –¥–µ–ª–∞–π –∏—Ö. –í—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ —Ç–≤–æ–π</i>\n\n<blockquote>üì¨<b>Your quests for today:\n\n‚ùáÔ∏è {message_text}</b></blockquote>", parse_mode='HTML', reply_markup=markup_Inline_BACK_QUESTS_FOR_TODAY)


            elif call.data=="QUESTS_FOR_TODAY":
                if not db.Get_Time_Zone(f"{call.from_user.id}"):
                    bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f"–ß—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ –∑–∞–¥–∞–Ω–∏—è –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å—Å—è —Å —Ç–≤–æ–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º\n\n(—É–∫–∞–∑–∞—Ç—å –Ω–∞–¥–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)")
                    time.sleep(0.5)
                    time_zone = bot.send_message(call.from_user.id, f"–ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å, –∏–ª–∏ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ\n\n(–¥–ª—è —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±–ª–∞—Å—Ç—å —Å —Ç–∞–∫–∏–º –∂–µ —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º)")
                    bot.register_next_step_handler(time_zone, time_qualifier)

                else:
                    TODAY_TASKS(call)


            elif call.data=="DELETE_QUESTS_FOR_TODAY":
                Some_methods.Remind_TODAY_TASKS(action="delete", UserId=call.from_user.id, msg=call)


            elif call.data=="REMEMBER":
                if not db.Get_Time_Zone(f"{call.from_user.id}"):
                    time_qualifier(call)
                else: ############################################################################################################################################################
                    res = bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f"–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å?")
                    bot.register_next_step_handler(res, Some_methods.remember_task)


            elif call.data=="REMEMBER_POST_VIDEO":
                bot.answer_callback_query(call.id, text=f'–ù–∞–ø–æ–º–Ω—é', show_alert = True)
                tz = db.Get_Time_Zone(f"{call.from_user.id}")
                cur_time = Some_methods.get_time__with_timezone(tz)

                time_object = dt.datetime.strptime(cur_time, '%d:%H:%M')

                new_time_1 = time_object.replace(hour=13, minute=00)
                new_time_2 = time_object.replace(hour=15, minute=00)
                new_time_3 = time_object.replace(hour=18, minute=00)
                new_time_4 = time_object.replace(hour=21, minute=00)

                new_before_time_1 = new_time_1.strftime('%d:%H:%M')
                new_before_time_2 = new_time_2.strftime('%d:%H:%M')
                new_before_time_3 = new_time_3.strftime('%d:%H:%M')
                new_before_time_4 = new_time_4.strftime('%d:%H:%M')

                UnicKey_1 = Some_methods.generate_random_string(40)
                UnicKey_2 = Some_methods.generate_random_string(40)
                UnicKey_3 = Some_methods.generate_random_string(40)
                UnicKey_4 = Some_methods.generate_random_string(40)
                db.ACTIONS_FOR_QUEUE(action="add", queue={"UserId":f"{call.from_user.id}", "now_date":None, "time_before":new_before_time_1, "data_type":"post_video", "msg_text":None, "photo":None, "UnicKey":UnicKey_1})
                db.ACTIONS_FOR_QUEUE(action="add", queue={"UserId":f"{call.from_user.id}", "now_date":None, "time_before":new_before_time_2, "data_type":"post_video", "msg_text":None, "photo":None, "UnicKey":UnicKey_2})
                db.ACTIONS_FOR_QUEUE(action="add", queue={"UserId":f"{call.from_user.id}", "now_date":None, "time_before":new_before_time_3, "data_type":"post_video", "msg_text":None, "photo":None, "UnicKey":UnicKey_3})
                db.ACTIONS_FOR_QUEUE(action="add", queue={"UserId":f"{call.from_user.id}", "now_date":None, "time_before":new_before_time_4, "data_type":"post_video", "msg_text":None, "photo":None, "UnicKey":UnicKey_4})



            elif call.data=="finish_post_video":
                bot.answer_callback_query(call.id, text=f'–ê–•–£–ï–ù–ù–û', show_alert = True)
                bot.delete_message(call.message.chat.id, call.message.message_id)

                # bot.delete_message(call.message.chat.id, call.message.message_id)


            elif call.data=="ALL_FINISH_TASK":
                data = db.ACTIONS_HISTORY_FINISH_TASKS(UserId="324430515", action="get")
                msg_text = ""

                for date, entries in data.items():
                    num = 0
                    header_text = f"‚îú-- <b>{date}</b>\n"
                    msg_text += header_text
                    for entry in entries:
                        num+=1
                        num_max = len(entries)
                        if num_max == num:
                            msg_text += f"‚îî‚úÖ {entry}\n\n"
                        else:
                            msg_text += f"‚îú‚úÖ {entry}\n"

                    msg_text = f"<blockquote>{msg_text}</blockquote>"

                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=msg_text.strip(), reply_markup=markup_Inline_BACK, parse_mode='HTML')



            elif call.data=="MY_GOALS":
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_Inline_MY_GOALS_MENU)

            elif call.data=="ADD_GOAL":
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_Inline_MY_GOALS_MENU)

            elif call.data=="COMPLETE_GOAL":
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_Inline_MY_GOALS_MENU)

            elif call.data=="DELETE_GOAL":
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_Inline_MY_GOALS_MENU)

            elif call.data=="CHECK_GOAL":
                bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_Inline_MY_GOALS_MENU)


            # elif call.data=="TRY_AWAIKENING":
            #     bot.delete_message(call.message.chat.id, call.message.message_id)
            #     num_input = bot.send_message(call.from_user.id, "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:üí§</b>\n\n–ü—Ä–∏–º–µ—Ä:\n08:45 –∏–ª–∏ 12:15", parse_mode='HTML')
            #     bot.register_next_step_handler(num_input, Some_methods.calculation_for_awakening)

            # elif call.data=="REFERAL_UPDATE":
            #     bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            #     invite_people(call.message, user_id=call.from_user.id)

            # elif call.data=="CHECK_TRANSFERRED":
            #     invited_people(call.message, user_id=call.from_user.id)

            # elif call.data=="INFO_SLEEP":
            #     Info_for_Sleep(call)

    except Exception as e:
        print(repr(e))



#_________________________________________________#

if __name__ == '__main__':
    # start_db()
    schedule.every(12).seconds.do(Remind_evenng)
    schedule.every().day.at("03:00").do(Morning_tasks)
    # schedule.every().day.at("21:00").do(Remind_evenng)
    Thread(target=schedule_checker).start()
    # Spin up a thread to run the schedule check so it doesn't block your bot.
    # This will take the function schedule_checker which will check every second
    # to see if the scheduled job needs to be ran.
    # Morning_tasks()
    bot.infinity_polling()
    #telegram_bot(token)